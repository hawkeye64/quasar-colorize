(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["d99106a2"],{2514:function(o,n,t){"use strict";var e=function(){var o=this,n=o.$createElement,t=o._self._c||n;return t("div",[t("section",{staticClass:"page-header"},[t("h1",{staticClass:"project-name"},[o._v("Colorize")]),t("h2",{staticClass:"project-tagline"}),t("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://github.com/hawkeye64/quasar-mixin-colorize",target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/demo",label:"Interactive Demo","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://donate.quasar.dev",target:"_blank",label:"Donate","no-caps":"",flat:""}})],1),t("main",{staticClass:"flex flex-start justify-center inset-shadow"},[t("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),t("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg bg-white shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[o._t("default")],2)])])},a=[],r={name:"Hero"},s=r,l=t("2877"),i=Object(l["a"])(s,e,a,!1,null,null,null);n["a"]=i.exports},"8b24":function(o,n,t){"use strict";t.r(n);var e=function(){var o=this,n=o.$createElement,t=o._self._c||n;return t("hero",[t("q-markdown",{attrs:{src:o.markdown,toc:""},on:{data:o.onToc}})],1)},a=[],r=t("2514"),s="Colorize\n===\n\nColorize is a Quasar Mix-in for components created for Quasar Framework. It is only for components that use a `render` function. It does not work with template formats.\n\n# Features\n\nAllows you to \"skin\" your component with customized text and background colors. You can use any color from the [Quasar Color Palette](https://quasar.dev/style/color-palette#Color-List), any # color (ex: `#c0c0c0`), rgb/rgba/hsl/hsla color (ex: `rgb(255,0,0)`), any css named colors (ex: `ghostwhite`) or any Quasar colors from css var (ex: `--q-color-red-10`). This is a lot of choices!\n\n# Install\nTo add this mix-in to your Quasar application, run the following (in your Quasar app folder):\n\n```bash\nyarn add quasar-mixin-colorize\n\n# or\n\nnpm install -S quasar-mixin-colorize\n```\n\n# Uninstall\nTo remove this mix-in from your Quasar application, run the following (in your Quasar app folder):\n\n```bash\nyarn remove quasar-mixin-colorize\n\n# or\n\nnpm remove -S quasar-mixin-colorize\n```\n\n# Docs\nCan be found [here](https://hawkeye64.github.io/quasar-mixin-colorize).\n\n# Examples\nCan be found [here](https://hawkeye64.github.io/quasar-mixin-colorize/examples).\n\n# Demo (source) Project\nCan be found [here](https://github.com/hawkeye64/quasar-mixin-colorize/tree/master/demo).\n\n# Examples\n\n## Use Any Color Definition\n\n```js\nimport Vue from 'vue'\nimport Colorize from 'quasar-mixin-colorize'\n\nconst MyComponent = Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize],\n\n  props: {\n    // color prop is added by colorize mix-in\n    // background-color is optional and needs to be added if needed\n    bgColor: String\n  },\n\n  data () {\n    return {\n    }\n  },\n\n  render (h) {\n    return h('div', this.setBothColors(this.color, this.bgColor, {\n      style: {\n        width: '200px',\n        height: '200px'\n      }\n    }), [\n      this.$slots.default\n    ])\n  }\n})\n```\n\n## Use CSS Vars\n\n```js\n// Import all Quasar's colors as CSS vars so we can use e.g --q-color-red-5\nimport 'quasar-mixin-colorize/src/qColors.styl'\n\nimport Colorize, { calculateColor } from 'quasar-mixin-colorize'\n\nexport default Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize],\n  \n  props: {\n    backgroundColor: {\n      type: String,\n      default: 'primary' // any color\n    }\n  },\n                    \n  computed: {\n    styles () {\n      let style = {}\n      style['--qribbon-text-color'] = calculateColor(this.color, 'white')\n      style['--qribbon-background-color'] = calculateColor(this.backgroundColor) // Notice default is against the prop in this instance\n      return style\n    }\n  },\n\n  ...\n\n  render (h) {\n    return h('div', {\n      style: this.styles\n    }, [\n      slot(this, 'default')\n    ])\n  }\n})\n```\n\n\n# Colorize API\n\n# Vue Properties\n| Vue&nbsp;Property | Type\t| Description |\n|---|---|---|\n| color | String | Any css color or from the Quasar Color Palette |\n\n# Vue Methods\n| Vue&nbsp;method | Args\t| Description |\n|---|---|---|\n| setTextColor | color, {} | The color and object containing `style` |\n| setBackgroundColor | background-color, {} | The background-color and object containing `style` |\n| setBothColors | color, bgColor, {} | The color, background-color and object containing `style` |\n\n# Exported Functions\n| Vue&nbsp;method | Args\t| Description |\n|---|---|---|\n| isNamedCssColor | color | Returns true if passed in color is a css named color |\n| isCssColor | color | Returns true if passed in color is a named color, hex color or rgb/rgba/hsl/hsla color |\n| isCssVar | color | Returns true if passed in color is a CSS variable starting with '--' |\n| calculateColor | color, defaultColor = 'black' | Check if a color is a standard CSS color or a quasar color |\n| makeQuasarColorVar | color, defaultColor | Generate a CSS variable definition based on the quasar color or existing variable passed in i.e `var(--q-color-red-5, 'default')` |\n\n# Donate\nIf you appreciate the work that went into this mix-in, please consider [donating to Quasar](https://donate.quasar.dev).\n",l={name:"PageIndex",components:{Hero:r["a"]},data:function(){return{markdown:s}},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(o){this.$store.commit("common/toc",o)}}},methods:{onToc:function(o){this.toc=o}}},i=l,c=t("2877"),u=Object(c["a"])(i,e,a,!1,null,null,null);n["default"]=u.exports}}]);